@page "/"
@implements IDisposable

@using HelpDesk.Shared.Data
@using HelpDesk.Shared.System


@inject AppState AppState
@inject HttpClient http
@inject BlazorTimer UpdateTimer
@inject IJSRuntime js


<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="sidebar bg-secondary d-none d-md-block">
            <nav class="nav flex-column" id="nav-menu">
                <a class="@CssClass(TicketViewMode.Open)" href="javascript: void(0)" @onclick="@(e => UpdateView(TicketViewMode.Open))">
                    <i class="fas fa-envelope mr-2"></i>Open <span class="badge badge-pill badge-info ml-1">@GetViewCount(TicketViewMode.Open)</span>
                </a>
                <a class="@CssClass(TicketViewMode.Closed)" href="javascript: void(0)" @onclick="@(e => UpdateView(TicketViewMode.Closed))">
                    <i class="fas fa-folder mr-2"></i>Closed <span class="badge badge-pill badge-info ml-1">@GetViewCount(TicketViewMode.Closed)</span>
                </a>
                <a class="@CssClass(TicketViewMode.All)" href="javascript: void(0)" @onclick="@(e => UpdateView(TicketViewMode.All))">
                    <i class="fas fa-newspaper mr-2"></i>All <span class="badge badge-pill badge-info ml-1">@GetViewCount(TicketViewMode.All)</span>
                </a>
                <hr class="bg-light" />
                <a class="@CssClass(TicketViewMode.Archived)" href="#archived" @onclick="@(e => UpdateView(TicketViewMode.Archived))">
                    <i class="fas fa-archive mr-2"></i>Archived
                </a>
            </nav>
        </div>

        <div class="col tab-content pt-3">
            <div class="tab-pane fade show active" id="tickets">
                <div class="row">
                    @foreach (var request in Requests)
                    {
                        <IssueCard Request=request />
                    }
                </div>
            </div>

            <div class="tab-pane fade" id="kbase">
                <h3>
                    Knowledge base
                </h3>
            </div>

            <div class="tab-pane fade" id="reports">
                <h3>
                    Reports
                </h3>
            </div>
        </div>

        <InfoPanel />
    </div>
</div>

@code {

    IEnumerable<RequestEx> Requests = new RequestList();
    

    protected async override Task OnInitializedAsync()
    {
        AppState.Requests = await http.GetFromJsonAsync<RequestList>("Request/GetRequests");
        AppState.OnSearchTextChanged += OnSearchTextChanged;

        UpdateView(TicketViewMode.Open);

        UpdateTimer.SetTimer(5000);
        UpdateTimer.OnElapsed += TimerElaspsedHandler;   
    }

    public void Dispose()

    {
        AppState.OnSearchTextChanged -= OnSearchTextChanged;
        UpdateTimer.OnElapsed -= TimerElaspsedHandler;
    }

    private void UpdateView(TicketViewMode viewMode)
    {
        AppState.ViewMode = viewMode;
        var r = AppState.Requests.Filter(AppState.SearchText);

        switch (viewMode)
        {
            case TicketViewMode.Open:
                {
                    Requests = r.Where(r => r.IsResolved == false);
                    break;
                }
            case TicketViewMode.Closed:
                {
                    Requests = r.Where(r => r.IsResolved == true);
                    break;
                }
            default:
                {
                    Requests = r;
                    break;
                }
        }
    }


    void OnSearchTextChanged()
    {
        UpdateView(AppState.ViewMode);
        InvokeAsync(StateHasChanged);
    }

    void TimerElaspsedHandler()
    {
        int openCount = AppState.Requests.Count();
        AppState.Requests = http.GetFromJsonAsync<RequestList>("Request/GetRequests").Result;

        UpdateView(AppState.ViewMode);

        if (AppState.Requests.Count() > openCount)
            js.InvokeVoidAsync("playSound", "media/ding.wav");
    }

    int GetViewCount(TicketViewMode view)
    {
        var r = AppState.Requests.Filter(AppState.SearchText);

        switch (view)
        {
            case TicketViewMode.Open:
                return r.Where(r => r.IsResolved == false).Count();

            case TicketViewMode.Closed:
                return r.Where(r => r.IsResolved == true).Count();

            default:
                return r.Count();
        }
    }

    string CssClass(TicketViewMode view)
    {
        var cssClass = new List<string>();

        cssClass.Add("nav-item");
        cssClass.Add("nav-link");

        if (AppState.ViewMode == view)
            cssClass.Add("active");

        return string.Join(' ', cssClass);
    }
}

