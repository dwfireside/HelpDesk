@page "/"

@using BlazorApp1.Data

@implements IDisposable


@inject AppState AppState
@inject BlazorApp1.Data.RequestService RequestService
@inject HelpDeskServer.Services.BlazorTimer Timer
@inject IJSRuntime js


<div class="col tab-content pt-3">
    <div class="tab-pane fade show active" id="tickets">
        <div class="row">
            @foreach (var request in Requests)
            {
                <IssueCard Request=request />
            }
        </div>
    </div>

    <div class="tab-pane fade" id="kbase">
        <h3>
            Knowledge base
        </h3>
    </div>

    <div class="tab-pane fade" id="reports">
        <h3>
            Reports
        </h3>
    </div>
</div>

<InfoPanel />


@code {

    IEnumerable<RequestEx> Requests = new RequestList();

    protected override async Task OnInitializedAsync()
    {
        Timer.SetTimer(5000);
        Timer.OnElapsed += TimerElaspsedHandler;

        AppState.OnViewModeChanged += OnViewModeChanged;

        await UpdateView();
    }

    public void Dispose()
    {
        AppState.OnViewModeChanged -= OnViewModeChanged;
        Timer.OnElapsed -= TimerElaspsedHandler;
    }

    private async Task UpdateView()
    {
        var r = await RequestService.GetRequestsAsync();
        AppState.Requests = r.Filter(AppState.SearchText);

        switch (AppState.ViewMode)
        {
            case TicketViewMode.Open:
                {
                    Requests = AppState.Requests.Where(r => r.IsResolved == false);
                    break;
                }
            case TicketViewMode.Closed:
                {
                    Requests = AppState.Requests.Where(r => r.IsResolved == true);
                    break;
                }
            default:
                {
                    Requests = AppState.Requests;
                    break;
                }
        }
    }

    private void OnViewModeChanged()
    {
        InvokeAsync(UpdateView);
        InvokeAsync(base.StateHasChanged);
    }

    private void TimerElaspsedHandler()
    {
        int openCount = AppState.Requests.Count();
        OnViewModeChanged();

        if (AppState.Requests.Count() > openCount)
            js.InvokeVoidAsync("playSound", "media/ding.wav");
    }
}


