@page "/"

@using HelpDeskServer.Data
@using HelpDeskServer.Services

@implements IDisposable


@inject AppState AppState
@inject HelpDeskServer.Data.RequestService RequestService
@inject HelpDeskServer.Services.BlazorTimer UpdateTimer
@inject IJSRuntime js

    <div class="container-fluid h-100">
        <div class="row h-100">
            <div class="sidebar bg-secondary d-none d-md-block">
                <nav class="nav flex-column" id="nav-menu">
                    <a class="@CssClass(TicketViewMode.Open)" href="javascript: void(0)" @onclick="@(e => AppState.ViewMode=TicketViewMode.Open)">
                        <i class="fas fa-envelope mr-2"></i>Open <span class="badge badge-pill badge-info ml-1">@GetViewCount(TicketViewMode.Open)</span>
                    </a>
                    <a class="@CssClass(TicketViewMode.Closed)" href="javascript: void(0)" @onclick="@(e => AppState.ViewMode=TicketViewMode.Closed)">
                        <i class="fas fa-folder mr-2"></i>Closed <span class="badge badge-pill badge-info ml-1">@GetViewCount(TicketViewMode.Closed)</span>
                    </a>
                    <a class="@CssClass(TicketViewMode.All)" href="javascript: void(0)" @onclick="@(e => AppState.ViewMode=TicketViewMode.All)">
                        <i class="fas fa-newspaper mr-2"></i>All <span class="badge badge-pill badge-info ml-1">@GetViewCount(TicketViewMode.All)</span>
                    </a>
                    <hr class="bg-light" />
                    <a class="@CssClass(TicketViewMode.Archived)" href="#archived" @onclick="@(e => AppState.ViewMode=TicketViewMode.Archived)">
                        <i class="fas fa-archive mr-2"></i>Archived
                    </a>
                </nav>
            </div>

            <div class="col tab-content pt-3">
                <div class="tab-pane fade show active" id="tickets">
                    <div class="row">
                        @foreach (var request in Requests)
                        {
                            <IssueCard Request=request />
                        }
                    </div>
                </div>

                <div class="tab-pane fade" id="kbase">
                    <h3>
                        Knowledge base
                    </h3>
                </div>

                <div class="tab-pane fade" id="reports">
                    <h3>
                        Reports
                    </h3>
                </div>
            </div>

            <InfoPanel />
        </div>
    </div>


@code {

    IEnumerable<RequestEx> Requests = new RequestList();

    protected override async Task OnInitializedAsync()
    {
        UpdateTimer.SetTimer(5000);
        UpdateTimer.OnElapsed += TimerElaspsedHandler;

        AppState.OnViewModeChanged += OnViewModeChanged;
        AppState.OnSearchTextChanged += OnViewModeChanged;

        await UpdateView();
    }

    public void Dispose()
    {
        AppState.OnViewModeChanged -= OnViewModeChanged;
        AppState.OnSearchTextChanged -= OnViewModeChanged;

        UpdateTimer.OnElapsed -= TimerElaspsedHandler;
    }

    private async Task UpdateView()
    {
        var r = await RequestService.GetRequestsAsync();
        AppState.Requests = r.Filter(AppState.SearchText);

        switch (AppState.ViewMode)
        {
            case TicketViewMode.Open:
                {
                    Requests = AppState.Requests.Where(r => r.IsResolved == false);
                    break;
                }
            case TicketViewMode.Closed:
                {
                    Requests = AppState.Requests.Where(r => r.IsResolved == true);
                    break;
                }
            default:
                {
                    Requests = AppState.Requests;
                    break;
                }
        }
    }

    private void OnViewModeChanged()
    {
        InvokeAsync(UpdateView);
        InvokeAsync(this.StateHasChanged);
    }

    void TimerElaspsedHandler()
    {
        int openCount = AppState.Requests.Count();
        OnViewModeChanged();

        if (AppState.Requests.Count() > openCount)
            js.InvokeVoidAsync("playSound", "media/ding.wav");
    }

    int GetViewCount(TicketViewMode view)
    {
        switch (view)
        {
            case TicketViewMode.Open:
                return AppState.Requests.Where(r => r.IsResolved == false).Count();

            case TicketViewMode.Closed:
                return AppState.Requests.Where(r => r.IsResolved == true).Count();

            default:
                return AppState.Requests.Count;
        }
    }

    string CssClass(TicketViewMode view)
    {
        var cssClass = new List<string>();

        cssClass.Add("nav-item");
        cssClass.Add("nav-link");

        if (AppState.ViewMode == view)
            cssClass.Add("active");

        return string.Join(' ', cssClass);
    }
}


